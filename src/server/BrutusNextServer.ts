/*
          ____             _               _   _ _______   ________
         |  _ \           | |             | \ | |  ___\ \ / /_   __|
         | |_) |_ __ _   _| |_ _   _ ___  |  \| | |__  \ V /  | |
         |  _ <| '__| | | | __| | | / __| | . ` |  __|  > <   | |
         | |_) | |  | |_| | |_| |_| \__ \ | |\  | |___ / . \  | |
         |____/|_|   \__,_|\__|\__,_|___/ |_| \_|_____/_/ \_\ |_|

                          Server application
*/

import { Syslog } from "../Server/Log/Syslog";
import { WebServer } from "../Server/Net/WebServer";
// import { Game } from "../Server/Game/Game";
// import { Engine } from "../Server/Engine/Engine";

export const timeOfBoot = new Date();

// Include sourcemap support module which uses .js.map files generated by
// typecript compiler to change stack traces to show typescript stack trace
// instead of generated javascript stack trace.
import * as SourceMapSupport from "source-map-support";
SourceMapSupport.install();

async function runBrutusNextServer(): Promise<void>
{
  Syslog.log("[SERVER]", "Starting BrutusNext server");

  try
  {
    await WebServer.start();
    // await Game.load();
    /// Tohle si tu nechám kvůli budoucí teminologii. Na klientu
    /// by to mělo bejt stejně.
    // await Game.init();
  }
  catch (error)
  {
    Syslog.logError(error, "Failed to start BrutusNext server");
    return;
  }

  // await Engine.loop();

  /// TODO:
  // Node.js application won't finish here as long as http
  // and https servers are open so we need to shut them down.
  // Calling their 'close()' methods, however, is not enough,
  // because they will wait for existing connections to close.
  // So the correct solution probably is to close all connections
  // first (and prefferably let the users know what is going on)
  // and close the servers after that. That will probably be
  // an asynchronous operation so we will actualy have to await
  // the shutdown here.
  //   All shutdown operations should also be properly logged.
  // WebServer.shutdown();

  Syslog.log("[SERVER]", "BrutusNext server has stopped normally");
}

runBrutusNextServer().catch
(
  (reason: any) =>
  {
    console.log(`BrutusNext server encountered an unhandled`
      + ` error: ${String(reason)}`);
  }
);