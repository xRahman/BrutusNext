// This is the master eslint config file that contains actual
// linting rules used for whole project. There must, however,
// be separate .eslintrc.json files in both ./Src/Server and
// ./Src/Clint to specify paths to respective tsconfig.json
// files.
{
  "env":
  {
    "browser": true,
    "es6": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions":
  {
    // There must be a typecript 'project' specified
    // for eslint to work correcly. We use .eslintrc.json
    // files in /Src/1Server and /Src/Client to do it
    // for client and server code but eslint fails to
    // lint shared code because it's ouside of both client
    // and server file structure. To work around that,
    // we specify a tsconfig.json here in master eslint
    // config file even (server is chosen randomly, client
    // tsconfig.json would work just as well).
    "project": "./Src/Server/tsconfig.json",
    "sourceType": "module"
  },
  "plugins":
  [
    "@typescript-eslint",
    "@typescript-eslint/eslint-plugin"
  ],
  "rules":
  {
      // Require that member overloads be consecutive.
      "@typescript-eslint/adjacent-overload-signatures": "error",
      // Requires using either T[] or Array<T> for arrays.
      // (I like to use both so turn this off.)
      "@typescript-eslint/array-type": "off",
      // Disallows awaiting a value that is not a Thenable.
      // (Sounds reasonable.)
      "@typescript-eslint/await-thenable": "error",
      // Bans “// @ts-ignore” comments from being used.
      // (We certainly don't want to hide errors so turn this on.)
      "@typescript-eslint/ban-ts-ignore": "error",
      // Bans specific types from being used.
      "@typescript-eslint/ban-types":
      [
        "error",
        {
          "types":
          {
            "Object":
            {
              "message": "Avoid using the `Object` type. Did you mean `object`?",
              "fixWith": "object"
            },
            "Boolean":
            {
              "message": "Avoid using the `Boolean` type. Did you mean `boolean`?",
              "fixWith": "boolean"
            },
            "Function": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
            "Number":
            {
              "message": "Avoid using the `Number` type. Did you mean `number`?",
              "fixWith": "number"
            },
            "String":
            {
              "message": "Avoid using the `String` type. Did you mean `string`?",
              "fixWith": "string"
            },
            "Symbol":
            {
              "message": "Avoid using the `Symbol` type. Did you mean `symbol`?",
              "fixWith": "symbol"
            }
          }
        }
      ],
      // Disable the base rule as it can report incorrect errors.
      "brace-style": "off",
      // Enforce consistent brace style for blocks.
      // (This is not exactly what I want, some cases should not be allowed.)
      "@typescript-eslint/brace-style":
      [
        "error",
        "allman",
        {
          // Allow single-line functions like getBox() { return this.box; }. 
          "allowSingleLine": true
        }
      ],
      // Disable the base rule as it can report incorrect errors.
      "camelcase": "off",
      // Enforce camelCase naming convention.
      "@typescript-eslint/camelcase":
      [
        "error",
        {
          "properties": "always",
          "genericType": "always"
        }
      ],
      // Require PascalCased class and interface names.
      "@typescript-eslint/class-name-casing": "error",
      // Enforces consistent usage of type assertions.
      "@typescript-eslint/consistent-type-assertions":
      [
        "error",
        {
          "assertionStyle": "as",
          "objectLiteralTypeAssertions": "never"
        }
      ],
      // Allow only use of either 'interface' or 'type'.
      // (Both have their uses so turn this off.)
      "@typescript-eslint/consistent-type-definitions": "off",
      // Disable the rule for all files. If will be enabled specifically
      // for typescript files in "overrides" section.
      "@typescript-eslint/explicit-function-return-type": "off",
      // Disable the rule for all files. If will be enabled specifically
      // for typescript files in "overrides" section.
      "@typescript-eslint/explicit-member-accessibility": "off",
      // Disable the base rule as it can report incorrect errors.
      "func-call-spacing": "off",
      // Require or disallow spacing between function identifiers and
      // their invocations.
      // (This rule doesn't allow opening brace on new line, which
      //  is used to call functions with long parameter list, so we
      //  can't use it.)
      "@typescript-eslint/func-call-spacing": "off",
      // Enforces naming of generic type variables.
      // (We don't enforce prefix for type variables so leave this off.)
      "@typescript-eslint/generic-type-naming": "off",
      // Disable the base rule as it can report incorrect errors.
      "indent": "off",
      // Enforce consistent indentation.
      "@typescript-eslint/indent":
      [
        "error",
        // Always indent with 2 spaces.
        2,
        {
          // Enforces indentation level for case clauses in switch statements.
          "SwitchCase": 1,
          // Enforces indentation level for 'var', 'let' and 'const'
          // declarators.
          // (Each variable needs to have it's own declarator so indenting
          //  is not allowed.)
          "VariableDeclarator": "off",
          // Enforces indentation level for file-level IIFEs.
          "outerIIFEBody": 1,
          // Enforces indentation level for multi-line property chains.
          "MemberExpression": 1,
          // Enforces indentation level for parameters in a function
          // declaration.
          "FunctionDeclaration":
          {
            // All arguments of the expression must be aligned with the
            // first argument.
            "parameters": "first",
            // Enforces indentation level for the body of a function
            // expression.
            "body": 1
          },
          // Enforces indentation level for parameters in a function
          // expression.
          "FunctionExpression":
          {
            // All arguments of the expression must be aligned with the
            // first argument.
            "parameters": "first"
          },
          // Enforces indentation level for arguments in a call expression.
          "CallExpression":
          {
            // All arguments of the expression must be aligned with the
            // first argument.
            "arguments": "first"
          },
          // Enforces indentation level for elements in arrays.
          // (All arguments of the expression must be aligned with the
          //  first argument.)
          "ArrayExpression": "first",
          // Enforces indentation level for properties in objects.
          // (All arguments of the expression must be aligned with the
          //  first argument.)
          "ObjectExpression": "first",
          // Enforces indentation level for import statements.
          // (All imported members from a module should be aligned
          //  with the first member in the list.)
          "ImportDeclaration": "first"
        }
      ],
      // Require that interface names should or should not be
      // prefixed with 'I'.
      "@typescript-eslint/interface-name-prefix": "off",
      // Require a specific member delimiter style for interfaces
      // and type literals (should there be ',', ';' or nothing
      // after each member of an interface or type).
      "@typescript-eslint/member-delimiter-style":
      [
        "error",
        {
          // Typescript default is ';' but we use ','
          // to make it consistent with object literals
          // (it's easier to remember one style that rules
          //  them all.)
          // There must not be a ',' after the last member
          // because it looks really ugly and unfinished.
          "multiline":
          {
            "delimiter": "comma",
            "requireLast": false
          },
          "singleline":
          {
            "delimiter": "comma",
            "requireLast": false
          }
        }
      ],
      // Enforces naming conventions for class members by visibility
      // (should the private and protected member names be prefixed
      //  with something like '_'?).
      // (No, don't prefix with '_'.)
      "@typescript-eslint/member-naming": "off",
      // Require a consistent member declaration order.
      "@typescript-eslint/member-ordering":
      [
        "error",
        {
          "default":
          [
            // Static part first.
            "public-static-field",
            "protected-static-field",
            "private-static-field",
            "public-static-method",
            "protected-static-method",
            "private-static-method",
            // Intance part second.
            "public-instance-field",
            "protected-instance-field",
            "private-instance-field",
            "public-constructor",
            "protected-constructor",
            "private-constructor",
            // "public-instance-method",
            // "protected-instance-method",
            // "private-instance-method"
            // Don't enforce method order so we can group methods by
            // type (e. g. event handlers) regardless of access.
            "instance-method" 
          ]
        }
      ],
      // Disallow generic Array constructors.
      "@typescript-eslint/no-array-constructor": "error",
      // Bans usage of the delete operator with computed key expressions.
      "@typescript-eslint/no-dynamic-delete": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-empty-function": "off",
      // Disallow empty functions.
      "@typescript-eslint/no-empty-function": "error",
      // Disallow the declaration of empty interfaces.
      "@typescript-eslint/no-empty-interface": "error",
      // Disallow usage of the any type.
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-extra-non-null-assertion": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-extra-parens": "off",
      // Disallow unnecessary parentheses.
      "@typescript-eslint/no-extra-parens": "error",
      // Forbids the use of classes as namespaces.
      "@typescript-eslint/no-extraneous-class": "error",
      // Requires Promise-like values to be handled appropriately.
      "@typescript-eslint/no-floating-promises": "error",
      // Disallow iterating over an array with a for-in loop.
      "@typescript-eslint/no-for-in-array": "error",
      // Disallows explicit type declarations for variables or
      // parameters initialized to a number, string, or boolean.
      "@typescript-eslint/no-inferrable-types": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-magic-numbers": "off",
      // Require use of const variables for explicit values.
      "@typescript-eslint/no-magic-numbers":
      [
        "error",
        {
          // Except for readonly class properties.
          "ignoreReadonlyClassProperties": true,
          // Except for enum values.
          "ignoreEnums": true,
          // Except for array indexes.
          "ignoreArrayIndexes": true,
          // Numbers can only be assigned to 'const' variables.
          "enforceConst": true
        }
      ],
      // Enforce valid definition of 'new' and 'constructor'.
      "@typescript-eslint/no-misused-new": "error",
      // Avoid using promises in places not designed to handle them
      "@typescript-eslint/no-misused-promises": "error",
      // Disallow the use of TypeScript modules and namespaces.
      "@typescript-eslint/no-namespace": "off",
      // Disallows non-null assertions using the ! postfix operator.
      // (Using non-null assertions cancels the benefits of the strict
      //  null-checking mode.)
      "@typescript-eslint/no-non-null-assertion": "error",
      // Disallow the use of parameter properties in class constructors.
      "@typescript-eslint/no-parameter-properties": "off",
      // Disallows invocation of require().
      // (require is still needed for some 3rd party modules.)
      "@typescript-eslint/no-require-imports": "off",
      // Disallow aliasing of 'this'.
      // (Use arrow functions instead to capture 'this'.)
      "@typescript-eslint/no-this-alias": "error",
      // Disallow the use of type aliases.
      // (Type definitions are useful so leave this off.)
      "@typescript-eslint/no-type-alias": "off",
      // Prevents conditionals where the type is always truthy or always falsy.
      "@typescript-eslint/no-unnecessary-condition": "error",
      // Warns when a namespace qualifier is unnecessary.
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      // Warns if an explicitly specified type argument is the
      // default for that type parameter.
      "@typescript-eslint/no-unnecessary-type-arguments": "error",
      // Warns if a type assertion does not change the type of an expression.
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      // Requires that all public method arguments and return type will be
      // explicitly typed.
      "@typescript-eslint/no-untyped-public-signature": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-unused-expressions": "off",
      // Disallow unused expressions.
      "@typescript-eslint/no-unused-expressions": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-unused-vars": "off",
      // Disallow unused variables.
      "@typescript-eslint/no-unused-vars": "error",
      // Disallow the use of variables before they are defined.
      "@typescript-eslint/no-use-before-define": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-useless-constructor": "off",
      // Disallow unnecessary constructor.
      "@typescript-eslint/no-useless-constructor": "error",
      // Disallows the use of require statements except in import statements.
      "@typescript-eslint/no-var-requires": "error",
      // Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index
      // is only used to access the array being iterated.
      "@typescript-eslint/prefer-for-of": "error",
      // Use function types instead of interfaces with call signatures.
      "@typescript-eslint/prefer-function-type": "error",
      // Enforce includes method over indexOf method.
      "@typescript-eslint/prefer-includes": "error",
      // Require the use of the 'namespace' keyword instead of the 'module'
      // keyword to declare custom TypeScript modules.
      "@typescript-eslint/prefer-namespace-keyword": "error",
      // Enforce the usage of the nullish coalescing operator instead of
      // logical chaining.
      "@typescript-eslint/prefer-nullish-coalescing": "error",
      // Prefer using concise optional chain expressions instead of
      // chained logical ands.
      "@typescript-eslint/prefer-optional-chain": "error",
      // Requires that private members are marked as readonly if they are
      // never modified outside of the constructor.
      "@typescript-eslint/prefer-readonly": "error",
      // Prefer RegExp.exec() over String.match() if no global flag
      // is provided.
      "@typescript-eslint/prefer-regexp-exec": "error",
      // Enforce the use of String.startsWith and String.endsWith
      // instead of other equivalent methods of checking substrings.
      "@typescript-eslint/prefer-string-starts-ends-with": "error",
      // Requires any function or method that returns a Promise to
      // be marked async.
      "@typescript-eslint/promise-function-async": "error",
      // Disable the base rule as it can report incorrect errors.
      "quotes": "off",
      // Enforce the consistent use of either backticks, double,
      // or single quotes.
      "@typescript-eslint/quotes":
      [
          "error",
          "double"
      ],
      // Enforce giving 'compare' argument to Array.sort.
      "@typescript-eslint/require-array-sort-compare": "error",
      // Disable the base rule as it can report incorrect errors
      "require-await": "off",
      // Disallow async functions which have no 'await' expression.
      "@typescript-eslint/require-await": "error",
      // When adding two variables, operands must both be of type number
      // or of type string.
      "@typescript-eslint/restrict-plus-operands": "error",
      // Enforce template literal expressions to be of string type.
      "@typescript-eslint/restrict-template-expressions":
      [
        "error",
        {
          "allowNumber": true
        }
      ],
      // By default, the rule requires awaiting a returned promise in
      // a try-catch-finally block and disallows returning an awaited
      // promise in any other context.
      "@typescript-eslint/return-await": "error",
      // Disable the base rule as it can report incorrect errors.
      "semi": "off",
      // Requires semicolons at the end of statements.
      "@typescript-eslint/semi": "error",
      // Disable the base rule as it can report incorrect errors
      "space-before-function-paren": "off",
      // Enforces consistent spacing before function definition
      // opening parenthesis.
      "@typescript-eslint/space-before-function-paren":
      [
        "error",
        "never"
      ],
      // Restricts the types allowed in boolean expressions.
      "@typescript-eslint/strict-boolean-expressions": "error",
      // Sets preference level for triple slash directives versus
      // ES6-style import declarations.
      "@typescript-eslint/triple-slash-reference": "error",
      // Require consistent spacing around type annotations.
      "@typescript-eslint/type-annotation-spacing": "error",
      // Requires type annotations to exist even if they are unnecessary.
      "@typescript-eslint/typedef": "off",
      // Enforces unbound methods are called with their expected scope.
      "@typescript-eslint/unbound-method": "error",
      // Warns for any two overloads that could be unified into one by
      // using a union or an optional/rest parameter.
      "@typescript-eslint/unified-signatures": "error",

      // Enforce 'for' loop update clause moving the counter in the
      // right direction.
      "for-direction": "error",
      // Enforce 'return' statements in getters.
      "getter-return": "error",
      // Disallow using an async function as a Promise executor.
      "no-async-promise-executor": "error",
      // Disallow 'await' inside of loops.
      "no-await-in-loop": "error",
      // Disallow comparing against -0.
      "no-compare-neg-zero":  "error",
      // Disallow assignment operators in conditional expressions.
      "no-cond-assign": "error",
      // Disallow the use of 'console'.
      "no-console": "off",
      // Disallow constant expressions in conditions.
      "no-constant-condition": "error",
      // Disallow control characters in regular expressions.
      "no-control-regex": "error",
      // Disallow the use of 'debugger'.
      "no-debugger": "error",
      // Disallow duplicate arguments in 'function' definitions.
      "no-dupe-args": "error",
      // Disallow duplicate conditions in if-else-if chains.
      "no-dupe-else-if": "error",
      // Disallow duplicate keys in object literals.
      "no-dupe-keys": "error",
      // Disallow duplicate case labels.
      "no-duplicate-case": "error",
      // Disallow empty block statements.
      "no-empty": "error",
      // Disallow empty character classes in regular expressions.
      "no-empty-character-class": "error",
      // Disallow reassigning exceptions in 'catch' clauses.
      "no-ex-assign": "error",
      // Disallow unnecessary boolean casts.
      "no-extra-boolean-cast": "error",
      // Disallow unnecessary semicolons.
      "no-extra-semi": "error",
      // Disallow reassigning 'function' declarations.
      "no-func-assign": "error",
      // Disallow assigning to imported bindings.
      "no-import-assign": "error",
      // Disallow variable or 'function' declarations in nested blocks.
      "no-inner-declarations": "error",
      // Disallow invalid regular expression strings in 'RegExp' constructors.
      "no-invalid-regexp": "error",
      // Disallow irregular whitespace.
      "no-irregular-whitespace": "error",
      // Disallow characters which are made with multiple code points
      // in character class syntax.
      "no-misleading-character-class": "error",
      // Disallow calling global object properties as functions.
      "no-obj-calls": "error",
      // Disallow calling some 'Object.prototype' methods directly on objects.
      "no-prototype-builtins": "error",
      // Disallow multiple spaces in regular expressions.
      "no-regex-spaces": "error",
      // Disallow returning values from setters.
      "no-setter-return": "error",
      // Disallow sparse arrays.
      "no-sparse-arrays": "error",
      // Disallow template literal placeholder syntax in regular strings.
      "no-template-curly-in-string": "error",
      // Disallow confusing multiline expressions.
      "no-unexpected-multiline": "error",
      
      // Disallow unreachable code after 'return', 'throw', 'continue',
      // and 'break' statements.
      "no-unreachable": "error",
      // Disallow control flow statements in 'finally' blocks.
      "no-unsafe-finally": "error",
      // Disallow negating the left operand of relational operators.
      "no-unsafe-negation": "error",
      // Disallow assignments that can lead to race conditions due
      // to usage of 'await' or 'yield'.
      "require-atomic-updates": "error",
      // Require calls to 'isNaN()'' when checking for 'NaN'.
      "use-isnan": "error",
      // Enforce comparing 'typeof' expressions against valid strings.
      "valid-typeof": "error",


      // Enforce getter and setter pairs in objects and classes.
      "accessor-pairs": "error",
      // Enforce 'return' statements in callbacks of array methods.
      "array-callback-return": "error",
      // Enforce the use of variables within the scope they are defined.
      "block-scoped-var": "error",
      // Enforce that class methods utilize 'this'.
      "class-methods-use-this": "error",
      // Enforce a maximum cyclomatic complexity allowed in a program.
      "complexity": [ "error", 10 ],
      // Require 'return' statements to either always or never specify values.
      // (This is not necessary for typescript.)
      "consistent-return": "off",
      // Enforce consistent brace style for all control statements.
      "curly": "off",
      // Require 'default' cases in 'switch' statements.
      "default-case": "error",
      // Enforce default parameters to be last.
      "default-param-last": "error",
      // Enforce consistent newlines before and after dots.
      "dot-location": "error",
      // Enforce dot notation whenever possible.
      "dot-notation": ["error", "property"],
      // Require the use of '===' and '!=='.
      "eqeqeq": "error",
      // Require grouped accessor pairs in object literals and classes.
      "grouped-accessor-pairs": ["error", "getBeforeSet"],
      // Require 'for-in' loops to include an 'if' statement.
      "guard-for-in": "error",
      // Enforce a maximum number of classes per file.
      "max-classes-per-file": [ "error", 1 ],
      // Disallow the use of 'alert', 'confirm', and 'prompt'.
      "no-alert": "warn",
      // Disallow the use of 'arguments.caller' or 'arguments.callee'.
      "no-caller": "error",
      // Disallow lexical declarations in case clauses.
      "no-case-declarations": "error",
      // Disallow returning value from constructor.
      "no-constructor-return": "error",
      // Disallow division operators explicitly at the beginning of regular
      // expressions.
      "no-div-regex": "error",
      // Disallow 'else' blocks after 'return' statements in 'if' statements.
      "no-else-return": ["error", { "allowElseIf": false } ],
      // Disallow empty destructuring patterns.
      "no-empty-pattern": "error",
      // Disallow 'null' comparisons without type-checking operators.
      "no-eq-null": "error",
      // Disallow the use of 'eval()'.
      "no-eval": "error",
      // Disallow extending native types.
      "no-extend-native": "error",
      // Disallow unnecessary calls to '.bind()'.
      "no-extra-bind": "error",
      // Disallow unnecessary labels.
      "no-extra-label": "error",
      // Disallow fallthrough of 'case' statements.
      "no-fallthrough": "error",
      // Disallow leading or trailing decimal points in numeric literals.
      "no-floating-decimal": "error",
      // Disallow assignments to native objects or read-only global variables.
      "no-global-assign": "error",
      // Disallow shorthand type conversions.
      "no-implicit-coercion": "error",
      // Disallow declarations in the global scope.
      "no-implicit-globals": "error",
      // Disallow the use of 'eval()'-like methods.
      "no-implied-eval": "error",
      // Disallow 'this' keywords outside of classes or class-like objects.
      "no-invalid-this": "error",
      // Disallow the use of the '__iterator__' property.
      "no-iterator": "error",
      // Disallow labeled statements.
      "no-labels": "error",
      // Disallow unnecessary nested blocks.
      "no-lone-blocks": "error",
      // Disallow function declarations that contain unsafe references inside
      // loop statements.
      "no-loop-func": "error",
      // Disallow multiple spaces.
      "no-multi-spaces": "error",
      // Disallow multiline strings.
      "no-multi-str": "error",
      // Disallow 'new' operators outside of assignments or comparisons.
      "no-new": "error",
      // Disallow 'new' operators with the 'Function' object.
      "no-new-func": "error",
      // Disallow 'new' operators with the 'String', 'Number', and 'Boolean'
      // objects.
      "no-new-wrappers": "error",
      // Disallow octal literals.
      "no-octal": "error",
      // Disallow octal escape sequences in string literals.
      "no-octal-escape": "error",
      // Disallow reassigning 'function' parameters.
      "no-param-reassign": "error",
      // Disallow the use of the '__proto__' property.
      "no-proto": "error",
      // Disallow variable redeclaration.
      "no-redeclare": "error",
      // Disallow certain properties on certain objects.
      "no-restricted-properties": "off",
      // Disallow assignment operators in 'return' statements.
      "no-return-assign": "error",
      // Disallow unnecessary 'return await'.
      "no-return-await": "error",
      // Disallow 'javascript:' urls.
      "no-script-url": "error",
      // Disallow assignments where both sides are exactly the same.
      "no-self-assign": "error",
      // Disallow comparisons where both sides are exactly the same.
      "no-self-compare": "error",
      // Disallow comma operators.
      "no-sequences": "error",
      // Disallow throwing literals as exceptions.
      "no-throw-literal": "error",
      // Disallow unmodified loop conditions.
      "no-unmodified-loop-condition": "error",
      // Disallow unused labels.
      "no-unused-labels": "error",
      // Disallow unnecessary calls to '.call()' and '.apply()'.
      "no-useless-call": "error",
      // Disallow unnecessary 'catch' clauses.
      "no-useless-catch": "error",
      // Disallow unnecessary concatenation of literals or template literals.
      "no-useless-concat": "error",
      // Disallow unnecessary escape characters.
      "no-useless-escape": "error",
      // Disallow redundant return statements.
      "no-useless-return": "error",
      // Disallow 'void' operators.
      "no-void": "error",
      // Disallow specified warning terms in comments.
      "no-warning-comments":[ "warn", { "terms": ["todo", "fixme"] }],
      // Disallow 'with' statements.
      "no-with": "error",
      // Enforce using named capture group in regular expression.
      "prefer-named-capture-group": "error",
      // Require using Error objects as Promise rejection reasons.
      "prefer-promise-reject-errors": "error",
      // Disallow use of the 'RegExp' constructor in favor of regular
      // expression literals.
      // (Using 'new RegExp("...") is more readable, so leave this off').
      "prefer-regex-literals": "off",
      // Enforce the consistent use of the radix argument when using
      // 'parseInt()'.
      "radix": "error",
      // Enforce the use of 'u' flag on RegExp.
      "require-unicode-regexp": "error",
      // Require 'var' declarations be placed at the top of their containing
      // scope.
      "vars-on-top": "error",
      // Require parentheses around immediate 'function' invocations.
      "wrap-iife": "error",
      // Require or disallow "Yoda" conditions.
      "yoda": "error",
      // Require or disallow strict mode directives.
      // (Disallow them because they are not needed when using typescript
      //  strict mode.)
      "strict": [ "error", "never" ],

      // Require or disallow initialization in variable declarations.
      "init-declarations": "error",
      // Disallow deleting variables.
      "no-delete-var": "error",
      // Disallow labels that share a name with a variable.
      "no-label-var": "error",
      // Disallow specified global variables.
      "no-restricted-globals": "off",
      // Disallow variable declarations from shadowing variables declared
      // in the outer scope.
      "no-shadow":
      [
        "error",
        {
          "builtinGlobals": "true"
        }
      ],
<mark>
      // Disallow identifiers from shadowing restricted names.
      "no-shadow-restricted-names": "error",
      // Disallow the use of undeclared variables unless mentioned in
      // '/* global */' comments.
      "no-undef": "error",
      // Disallow initializing variables to 'undefined'.
      "no-undef-init": "error",
      // Disallow the use of 'undefined' as an identifier.
      "no-undefined": "error",
      // Disallow unused variables.
      "no-unused-vars": "error",
      // Disallow the use of variables before they are defined.
      "no-use-before-define": "error",    

      "arrow-body-style": "off",
      "arrow-parens": [
          "error",
          "as-needed"
      ],
      // "capitalized-comments": "error",
      "comma-dangle": "off",
      "constructor-super": "error",
      "eol-last": "off",
      "id-blacklist": [
          "error",
          "any",
          "Number",
          "number",
          "String",
          "string",
          "Boolean",
          "boolean",
          "Undefined",
          "undefined"
      ],
      "id-match": "error",
      // "import/no-default-export": "error",
      // "import/no-deprecated": "error",
      // "import/no-extraneous-dependencies": "error",
      // "import/no-internal-modules": "error",
      // "import/no-unassigned-import": "off",
      "import/order": "off",
      "linebreak-style": [
          "error",
          "unix"
      ],
      "max-len": [
          "error",
          {
              "code": 79
          }
      ],
      "max-lines": [
          "error",
          2000
      ],
      "new-parens": "error",
      "newline-per-chained-call": "off",
      "no-bitwise": "error",
      "no-duplicate-imports": "error",
      "no-multiple-empty-lines": "error",
      // "no-null/no-null": "error",
      "no-plusplus": [
          "error",
          {
              "allowForLoopAfterthoughts": true
          }
      ],
      "no-restricted-syntax": [
          "error",
          "ForInStatement"
      ],
      "no-shadow": [
          "error",
          {
              "hoist": "all"
          }
      ],
      "no-trailing-spaces": "error",
      "no-undef-init": "error",
      "no-underscore-dangle": "error",
      "no-var": "error",
      "object-shorthand": "error",
      "one-var": [
          "error",
          "never"
      ],
      "padding-line-between-statements": [
          "off",
          "error",
          {
              "blankLine": "always",
              "prev": "*",
              "next": "return"
          }
      ],
      // "prefer-arrow/prefer-arrow-functions": "error",
      "prefer-const": "error",
      "prefer-object-spread": "error",
      // "prefer-readonly": "error",
      "prefer-template": "error",
      "quote-props": [
          "error",
          "consistent-as-needed"
      ]
      // "spaced-comment": "error",
      // "unicorn/filename-case": "error",
      // "@typescript-eslint/tslint/config":
      // [
      //     "error",
      //     {
      //         "rules": {
      //             "brace-style": [
      //                 true,
      //                 "allman",
      //                 {
      //                     "allowSingleLine": true
      //                 }
      //             ],
      //             "comment-type": [
      //                 true,
      //                 "singleline",
      //                 "multiline",
      //                 "doc",
      //                 "directive"
      //             ],
      //             "encoding": true,
      //             "invalid-void": true,
      //             "jsdoc-format": [
      //                 true,
      //                 "check-multiline-start"
      //             ],
      //             "match-default-export-name": true,
      //             "no-boolean-literal-compare": true,
      //             "no-default-import": true,
      //             "no-dynamic-delete": true,
      //             "no-inferred-empty-object-type": true,
      //             "no-mergeable-namespace": true,
      //             "no-null-undefined-union": true,
      //             "no-promise-as-boolean": true,
      //             "no-redundant-jsdoc": true,
      //             "no-reference-import": true,
      //             "no-restricted-globals": true,
      //             "no-tautology-expression": true,
      //             "no-unnecessary-callback-wrapper": true,
      //             "number-literal-format": true,
      //             "prefer-method-signature": true,
      //             "prefer-switch": true,
      //             "prefer-while": true,
      //             "return-undefined": true,
      //             "static-this": true,
      //             "strict-comparisons": true,
      //             "strict-string-expressions": true,
      //             "switch-final-break": [
      //                 true,
      //                 "always"
      //             ],
      //             "typedef": [
      //                 true,
      //                 "property-declaration",
      //                 "object-destructuring",
      //                 "array-destructuring"
      //             ],
      //             "unnecessary-else": true,
      //             "whitespace": [
      //                 true,
      //                 "check-branch",
      //                 "check-operator",
      //                 "check-module",
      //                 "check-separator",
      //                 "check-rest-spread",
      //                 "check-type",
      //                 "check-typecast"
      //             ]
      //         }
      //     }
      // ]
  },
  "overrides":
  [
    {
      // Enable following rule specifically for TypeScript files
      "files": ["*.ts", "*.tsx"],
      "rules":
      {
        // Require explicit return types on functions and class methods.
        "@typescript-eslint/explicit-function-return-type":
        [
          "error",
          {
            "allowExpressions": true,
            "allowTypedFunctionExpressions": true,
            "allowHigherOrderFunctions": true
          }
        ],
        // Require explicit accessibility modifiers on class properties
        // and methods.
        "@typescript-eslint/explicit-member-accessibility":
        [
          "error",
          {
            "overrides":
            {
              // Disallow 'public constructor' because vast majority of
              // constructors are public so it would only add clutter.
              "constructors": "no-public"
            }
          }
        ]
      }
    }
  ]
}
