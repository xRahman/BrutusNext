Prototypová dědičnost entit
----------------------------

Nevím, jak jsem to původně zamýšlel, ale očividně nepůjde udělat
  prototype chain poskládaný z mých vlastních instancí v rámci
  class hierarchy v kódu.
  - když mám hierarchy class Orc extends Mob {}, tak můžu vyrábět
    instance orků přes Object.create(new Orc()), ale ten new Orc()
    už nemůže mít jako prototyp new Mob(). Tj. nemůžu zapsat
    do prototypeMob a změnit tím properties na všech mobech z něj
    zděděnejch.
(nebo jsem to možná kdysi nějak vyřešil? Nevypadá to.)

Ono to asi nevadí. Pořád můžu dělat instance mobů, room a podobně,
  jen se holt muset lišit pouze obsahem properties, ne tím, jaký properties
  maj. Různou funkčnost můžu zajistit setováním dat, Brutus na tom ostatně
  byl postavenej (flagy například). Tady to teda můžu udělat i tak,
  že tam setnu objekt s příslušnou funkcionalitou, takže to bude polymorfní.


------------------------------------------------------------------------------

Date a prototypová dědičnost
-----------------------------

Proč Date nejde prototypově dědit a Time ano?

- problém je, že Date property se sice zdědí, ale setovací metody
  měněj hodnotu data na předkovi. Instanciovat ji přes Object.create()
  nejde, protože:
    "Uncaught TypeError: Method Date.prototype.toDateString called on
     incompatible receiver [object Object]"
- tj. musel bych to udělat jako u Setu a Mapy, že instance si vytvoří
  vlastní Date object a tudíž ho nebude dědit.

------------------------------------------------------------------------------

Rozdělení Serializable
-----------------------

Komplikují to metody propertyFromCustomJson() a propertyToCustomJson().

- V zásadě to jsou funkce, které když narazí na určité propertyName,
  tak vyplivnou custom json. Tj. nemusí to nutně být metody a nemusí
  se nutně volat na this.

- Problém ale je, když mám Serializable v Serializable. Serializace toho
  vnitřního se volá ze serializace vnějšího, takže custom serializační
  metodu nejde předat externím parametrem. Tudíž to přece jen musí bejt
  metoda.

- Možná ji ale vstupní serializační funkce může předat jako parametr tomu,
  co má pod sebou.

IDEA: Classy Jsonizer a Dejsonizer
- částečně jsem napsal Dejsonizer, takže to asi půjde. Otázka je,
  jestli se má vyrobit instance Dejsonizeru při každé dejsonizaci,
  nebo má v serializable bejt jedna na pevno a reusovat se.
- Když to bude on-demand, tak bude bez problémů setnutí temporary
  proměnný path.

------------------------------------------------------------------------------

Verze v Serializable
---------------------

- Házet error při nesouhlasu verzí je blbost, to by mělo smysl pouze
  pokud bych data konvertoval externě.

- Spíš budu potřebovat možnost loadovat data i z out of date formátu,
  tj. něco ve stylu propertyFromCustomJson().
  Možná na to používat přímo metodu propertyToCustomJson()?
  - asi by měla jako parametr dostávat verzi z jsonu (k thisVersion přístup
    má, protože to je metoda).

=> Zatím se na to úplně vykašlu. Budu to řešit, až to budu k něčemu potřebovat.


------------------------------------------------------------------------------

Trik na class composition
--------------------------

https://stackoverflow.com/questions/23876782/how-do-i-split-a-typescript-class-into-multiple-files

class BigClass
{
    public getValue = getValue;
    public setValue = setValue;

    protected value = "a-value";
}

function getValue(this: BigClass)
{
    return this.value;
}

function setValue(this: BigClass, value: string )
{
    this.value = value;
}

/*
  Tohle je hezký, má to ale jeden problém: Z "externí" metody
  jde přistupovat pouze na public a protected properties classy, nikoliv
  na private.
*/

------------------------------------------------------------------------------

Prototypová dědičnost a deserializace {} a []
----------------------------------------------

ÚVAHA:
- když mám v serializable {} nebo [] property, která není undefined,
  mám ji při deserializaci přepsat novým {} nebo [] s deserializovanými
  properties, nebo zapisovat do stávající?
  - Asi to přepsat novým {} nebo []. U pole to určitě dává smysl,
    přidáváním do starýho pole bych vytvořil kdo ví co. Tudíž asi
    objekt řešit stejně (jako kdyby to byla primitivní value, kterou
    prostě přepíšu novou hodnotou).
Otázka: Co to udělá s prototypovou dědičností?
- tu to nejspíš rozbije. Nestačí vytvořit {}, musí to být {} s prototypem
  rovným té samé {} property v předkovi.
To bude dost těžký vyrobit, sakryš...
- hmm, to je možná důvod, proč jsem zapisoval do existujícího {}, když tam byl
  (Jako že tam musí bejt, protože při vyrábění instance jsem inicializoval
   prototypovou dědičnost)
TODO: Při deserializaci {} vůbec nevyrábět novej {}. Pokud je targetProperty
  undefined, je to error a je třeba hodit exception - znamená to, že nebyla
  správně provedena inicializace prototypové dědičnosti při instancializaci.
TODO: Pořádně se podívat, jak je to s prototypovou dědičností []
  - Mrknout, jestli u pole nastavuju prototyp při instanciaci
    a jak funguje dědičnost, když předka mám (mám dojem, že to fungovalo
    vcelku intuitivně, tj. že když na indexu [i] bylo něco v poli potomka,
    bralo se to z něj, a když ne, bral se index [i] z pole předka - otázka
    teda je, jestli to je žádoucí chování a jestli by se spíš pole nemělo
    chovat jako primitivní typ, tj. když ho potomek nemá, tak se bere
    pole předka, ale když ano, bere se pouze pole potomka a nemíchá se to.
    (Ta druhá varianta by znamenala, že v Deserializable.deserializeArray()
     bych deserializoval vždycky do novýho [] a to pak přiřadil do
     targetProperty (tedy tak, jak je to teď) - nové [] nebude mí jako prototyp
     [] v předkovi, takže by to mělo zafungovat)
  - až se rozhodnu pro jednu z variant, tak podle toho udělat jak intanciaci,
    tak upravit Deserializable.deserializeArray()
RESULT testování:
- chová se to stejně, ať už dám poli v potomkovi pole předka jako prototyp
  nebo ne - dědí se per index (jako kdyby indexy byly properties objektu).
(Rozdíl je jen v tom, že když dám console.log(potomke.pole), tak bez
 ručního nastavení prototypu mi to vypíše regulérní pole, zatímco s ručním
 nastavením prototypu mi to vypíše jako {}, jehož prototype je pole předka)
Aha, tak moment - bez ručního nastavení prototypu to zjevně zapisuje na
  příslušnej index v předkovi, takže potome.pole je reference na predek.pole
Aha!
- když dám potomek.pole = [] a až pak do něj zapisuju, tak to dědičnost fakt
  zruší a do předka se nezapisuje.
TAKŽE:
- Při vytváření instance MUSÍM buď do potomek.pole dát [], nebo ho vytvořit
  přes Object.create() s polem na předkovi coby prototypem, protože jinak
  se bude zapisovat do pole předka (to je určitě špatně)
- Při deserializaci bych to asi měl udělat stejně, protože jinak se bude
  dědičnost chovat různě podle toho, jak je objekt vytvořenej.
ZÁVĚR:
- Při vyrábění intance udělat potomek.pole přes Object.create() s polem
  v předkovi jako prototypem
- Při deserializaci do potomek.pole zapsat [] a do něj nasypat hodnoty.
Chovat se to bude takhle:
- dokud do potomek.pole nezapíšu [], tak bude obsahovat hodnoty předka,
  zápis do potomek.pole ale NEZMĚNÍ predek.pole (což rozhodně nesmí).
  Když místo přiřazení [] zapíšu na index, tak se to bude chovat divně
  (pole bude mít mix prvků předka a potomka). Nic mi ale nebrání do něj
  přiřadit [], pak se to s předkem mixovat nebude (což je přesně věc, kterou
  budu dělat při deserializaci).
Má to dvě vady na kráse:
- když po instanciaci zapíšu na konkrétní indexy a pak objekt savnu a loadnu,
  tak se bude chovat jinak (předtím to byl mix indexů, teď to bude [] s novými
  hodnotami). To se ale asi nedá nic dělat.
- když do potomek.pole zapíšu [], tak už ho nebudu moct "smazat" a vrátit se
  zpět k dědění z předka.

Ha!
- ještě je tu možnost udělat potomek.pole.length = 0;
  - To pole "vyprázdní", ale prototypem bude pořád pole v překovi
    (zatímco při přiřazení [] se prototyp ztratí).
  - když následně udělám 'delete potomek.pole;', tak se vrátím
    do původního stavu, kdy vidím zděděné pole.
(Čili tenhle trik řeší aspoň problém s tím, že se můžu vrátit k dědění
 z předka.)

Hmm, popravdě by bylo asi nejlepší se na prototypovou dědičnost polí
  vykašlat a při instanciaci i při deserializaci do pole zapisovat [].
  Přijdu tím sice o možnost zdědit pole, ale bude se to chovat konzistentně
  (a Set ani Map se taky nedaj zdědit).

------------------------------------------------------------------------------

Kolik exitů může být k M x N roomám?
-------------------------------------

1 rooma: 8 exitů

Přidám druhou roomu: 7 exitů (1 už tam byl)
- každá další rooma ve stejnémsměru: + 7 exitů

Tj. roomy v linii: 1 + (M x 7)

přidám dolů:

2x2: 6 vnitřních + 20 okolních


Jiná metoda výpočtu:

Vodorovné exity:
  (M + 1) exitů v kažé řádce, N řádek.
  - takže:
  (M + 1) * N

Horizontální exity:
  M * (N + 1)

Šikmé exity (jeden směr):

  Vyčuhující doleva: N
  Vyčuhující doprava: N

  Uvnitř mřížky: (M - 1) * (N + 1)

  Celkem: 
    (M + 1) * N + M * (N + 1) + 2N + (M - 1) * (N + 1)


kolmé:
  M * N + N + M * N + M = 2 * M * N + M + N

šikmé:
  2N + (M - 1) * (N + 1) = 2N + 2 * M * N + 2M - 2N - 2


   2MN + M + N + 2N + 2MN + 2M - 2 =

   >>> 4MN + 3M + 3N - 2 <<<

M = 2, N = 3, exits = 37
M = 3, N = 2, exits = 37

Pro M = N:
4nn + 6n - 2

------------------------------------------------------------------------------

Component Hierarchy
--------------------

- property element nemůže bejt abstraktní, protože pak se s ní nedá
  pracovat v konstruktoru a tudíž se na ní nedají automaticky setnout
  css classy.

- když je konkrétní, tak se musí předávat jako parametr konstuktoru,
  aby byla inicializovaná, tudíž se nedá přetížit typ

- teoreticky to jde vyřešit přes generic class Component, ale to je jednak
  otrava a pak to taky vylučuje parenta s obecným typem.
  - Možná nevylučuje, parent může bejt typu Component<HTMLElement | SVGElement>
    Ok, takže pres generic by to možná udělat šlo.

Další možnost je, v konstuktoru potomka si přiřadit vlastní this.element.
- To naráží na problém, že element se musí nejdřív předat konstruktoru předka,
  tj. nemůžu si ho schovat do promměnný a tu pak přiřadit.
- Jde to udělat přes tmp proměnnou v modulu, ale je to dost škaredý a musel
  bych to tak udělat v každý komponentě, která by chtěla mít specifickej typ
  elementu.

Závěr: Pokud budu chtít mít specifickej typ this.elementu, tak největší smysl
  dává generic.

Otázka je, jestli to je vůbec potřeba. Elementu se stejně setujou atributy
  přes setAttribute(), což umožňuje setnout úplně cokoliv nehledě na typ.
  Úplně cokoliv teda nebude pak nic dělat, ale to nevadí, páč zapouzdřením
  zajistím, že setuju smysluplný atributy.
Potřebuju to tudíž vůbec někdě?

------------------------------------------------------------------------------

Problém:

Vyhození všech roomSvgs do cashe a znovu rozmístění do mapy
 přehází pozice, což vede k tomu, že se znova firnou eventy na elementu,
 kterej už představuje jinou roomu.
 - zkusit udělat z cashe hashmapu, nechávat roomám coords a pokud tam je
   rooma na správnejch coords, tak ji reusnout.
 Problém: V hashmapě nemůže bejt víc entit pod stejnym klíčem, takže
   iniciální (nebo i vyhozený) roomy tam nemůžu dát pod klíčem "In cache"...
 Řešení:
 - mít v cache pole s neřazanejma roomama a mapu se zařazenejma...
 Další problém: Co když roomu s příslušnejma coords nenajdu, takže budu
   potřebovat novou, ale všechny roomy jsou použitý s nějakejma coords?

IDEA (asi lepší: Roomy, který jsou ve výřezu, vůbec nepřemisťovat, jen jim
  updatnout grafiku. Tzn.:
TODO: Pamatovat si původní pozici.
TODO: V cyklu, kdy hážu roomy do cashe checkovat, jestli jsou coords
  v původním výřezu a pokud ano, tak roomu do cashe neházet.
TODO: V cyklu, kde updatuju roomy, checkovat, jestli coord jsou v původním
  výřezu. Pokud ano, jen updatnou grafiku. Pokud ne, vzít roomu z cashe.

Tohle problém stejně neřeší, protože když změním patro nebo projdu
  teleportem, tak se mi stejně vyměněj všechny roomy, čili mi přijdou
  mouse eventy na jinou roomu.

------------------------------------------------------------------------------

Výpočet, kolik roomů má bejt připravenejch
-------------------------------------------

- První vidle do toho hází skutečnost, že ona jsou vyráběna hidden,
  takže komponenty uvnitř nich maj nulovou velikost. Takže z MapSvg
  nic nezjistím.

- Druhý vidle do toho hází, že i když si vezmu velikost browser okna,
  uživatel může resiznout celej browser - takže bych to stejně musel
  dynamicky přepočítávat.

A nejdůležitější: Nic z toho nepotřebuju na funkční hru.
  - potřebuju optimalizaci, že budu mít připravenej určitej
    počet room elementů a ty budu recyklovat. Když bych totiž
    vyrobil roomů na celej world, tak by se to nehejbalo.
    - tenhle počet ale klidně může bejt konstanta, dynamický
      přepočítání se dá dopsat kdykoliv pozdějš.



------------------------------------------------------------------------------

Parsování argumentů ze stringu (StringUtils.scan())
----------------------------------------------------

- umím vyparsovat string argumenty podle substringů
- neumím je zkonvertit do požadovaných typů a vrátit je jako
  rovnou použitelné proměnné.

IDEA: Passnu parsovací funkci result object, do kterého to rovnou zapíše
  (a zkontroluje, že se naparsovalo tolik argumentů, kolik má ten objekt
   properties)
  - mohly by se z jeho properties vyčítat i typy.
  - případně bych do substringů mohl propašovat jména properties,
    do kterých se mají atributy zapisovat. Něco ve stylu:
scan("A 1 B 2", result, [ "A ", [ "a" ], " B " [ "b" ]);
  - nebo ta jména propašovat do stringu, nějak takhle:
scan("A 1 B 2", result, "A ${a} B ${b}");
  (result by byl typu { a, b }).
  - nebo takhle:
scan("A 1 B 2", result, "A ", "${result.a}", " B ", "${result.b}");


Usage example:
 const str = "[ A: 1, B: cat ]";
 let result { a: number, b: string } = {};
 result = scan(str, result, "[ A: ${a: number}, B: ${b: string} ]");

Problém s typama:
- můžu sice říct, že 'result' bude nějakýho typu, ale není, jak to
  zkontrolovat, pokud parametr 'result' nebude mít definované hodnoty
  všech properties, protože z 'undefined' se nepozná typ.

Možnosti:
- smířit se s tím, že typy nemusej sedět.
- parsovat jen stringy s tím, že typecast se nebude dělat v rámci
  scanování.
=> kašlu na konverze.

------------------------------------------------------------------------------

Problémy s výkonem svg
----------------------

Možnosti:

1) Použít pixi.js
  http://scottmcdonnell.github.io/pixi-examples/index.html?s=demos&f=interactivity.js&title=Interactivity

2) Udržovat v DOM jen elementy, který můžou bejt vidět, a přiávat je
   přes insertHtml().

Problém: Když všechno vyrobím najednou přes insertHtml, tak nebudu mít
  komponenty a na ně navěšený event handlery
  (to je možná důvod, proč je to pomalý, a proč to žere tolik paměti).

Ok, takže nejdřív zkusit mít event handlery na parentovi.

3) Cashovat svg elementy
- tj. nemazat je, reusovat je. A to i při přepínání pater.

4) Pokud nebudou event handlery na RoomSvg komponentách,
  tak je asi zbytečný ty komponenty vyrábět. Budou jich tisíce, takže
  to sežere spoustu paměti.
=> Mít komponenty pouze na kontejnery (RoomsSvg, ExitsSvg) a to,
   co je uvnitř, vyrábět ručně.
- v kontejneru si pořád můžu držet odkazy na jednotlivý elementy,
  abych s nima mohl manipulovat.

5) Použít document.createDocumentFragment()
https://coderwall.com/p/o9ws2g/why-you-should-always-append-dom-elements-using-documentfragments
- nebo alternativně vyrobit nejdřív parent element, nedávat ho do DOM,
  nainsertovat do něj všechny children a až pak appendnout parenta do DOM

Vidím to takhle:
- určitě optimalizovat vytváření
  - nevyrábět komponentu pro každou roomu
  - mít jen jeden event handler
  - sázet to do kontejneru mimo DOM a ten pak appendnout do DOM
    (appendovat přes javascript bude asi nejrychlejší)
- reusovat komponenty, minimálně teda ty pro neexistující roomy.
  Při přegenerování mapy se černejm tečkám nastavěj jen nový pozice
    a coords.
- z velikosti MapSvg a rozestupu roomů počítat, kolik jich je vidět při
  maximálním zoomu.
- Otázka je, jestli při panování mapy vždycky roomy na jedný straně umazat
  a na druhý vyrobit, nebo i tady reusnout komponenty (prostě je posunout
  na druhou stranu).
  - minimálně dummy roomy by asi šlo reusovat i tady.

Ha! Zoomování browseru přes ctrl+wheel mi do toho kupodivu vidle
  nehodí, protože jsem ho zjevně zakázal. Což je fajn, scalování
  fontů si můžu udělat interně.

------------------------------------------------------------------------------

Data vs GUI
------------

Mají data šahat do GUI a updatnout ho, nebo má spíš GUI číst data
a nastavit se podle nich?

 Ideálně ani jedno.

 - data by rozhodně neměla pracovat s GUI komponentama.

IDEA:
 Editor - z GUI půjde zaovlat Editor.createRoom() nebo tak něco,
   editor pak zavolá World.createRoom().
 - Je nějakej důvod, proč nezavolat rovnou World.createRoom()?
   Asi jo: Když na to samý napíšu textovej příkaz, tak můžu
   zavolat tu samou funkci editoru (na druhou stranu příkaz
   asi spíš pošlu na server...)

  Ok, co vytvoření svg podle dat.
  - World by určitě neměl mít odkazy na GUI, tj. rozhodně by neměla
    existovat metoda World.updateUI() nebo tak něco.

Bylo by asi šikovný, mít někde odkazy přímo na komponenty, který je
  potřeba updatovat - nemusel bych se pak provolávat přes MapWindow
  a všchno, co je do něj vnořený.
- tj. byl by to nějakej middleman, kterej by si bral data z Worldu a vyráběl
  by podle nich komponenty na patřičnejch místech v UI.
  - asi Gui se na to teď nejvíc hodí. Gui.updateMap().

OK. Každopádně základní myšlenka je, že data sama nic nedělaj s GUI
  a stejně tak GUI komponenty se samy nehrabou na data. Data mají prostě
  pouze metody na čtení a setování dat, GUI má pouze metody na vyrábění
  gui elementů a posílání messagů (což je teda volání metod).

------------------------------------------------------------------------------

Použití svg z inkscapu
-----------------------


http://techdatadigest.blogspot.com/2014/03/creating-svg-from-inkscape-to-use-on.html

------------------------------------------------------------------------------

Exity
------

Pokud budu mít exity v gridu (budou mít souřadnice), tak asi nemusím
řešit, odkud kam vedou a nemusím je zapisovat do room.
(Respektive zapisovat musím akorát teleportační exity).

Exity mají souřadnice 32.5, 12.5
Na nich jsou vždycky 4 exity:
 ew
 nwse
 swne

- To je naprd. Z hlediska map dat potřebuju prostě seznam exitů
  a každej z nich má dvoje souřadnice (tj. vím, odkud kam ho
  mám nakreslit).

IDEA: Když budou mít exity idčka, tak snadno poznám, že
  už ho v seznamu mám.

Potřebuju u exitu vědět, odkud kam vede?
- hodí se to, z roomů si přečtu coords.

-----------------

Tak asi ještě jinak:

- na entitu Exit se asi vykašlu. Nejspíš není potřeba a byl by pak problém
  s tím, do který zóny patří exit mezi dvěma zónama.

- Exity v roomách se budou odkazovat na roomu, ne na coords.
  Je to sice v zásadě jedno, ale častějš budu přistupovat na roomu.

- Obousměrnost exitů a podobně tudíž budu muset řešit při buildování mapy.

Exit directions možná pořešit úplně jinak
  - časem nejspíš budu potřebovat převádět směr na jednotkovej vektor,
    tj. můžu rovnou vyrobit mapu jmen exitů na vektory.
  - a zjištění direction pak můžu udělat tak, že projdu vektory
    a porovnám, na kterej to sedí.
  Nevýhody:
  - bude to fungovat jen na jednotkovou vzdálenost
  - bude to pomalejší, protože budu muset procházet pole a dělat
    spoustu porovnání.
=> Mapování asi někdy udělám, ale zjišťování direction nechám tak, jak je.


------------------------------------------------------------------------------

Mapa
-----

MUD data
  Koordináty v gridu
  - X a Y musej bejt celý čísla
  - Z nutně ne, ale platí, že v každém celočíselném intervalu může bejt
    jen jedna rooma (tj. efektivně i z je celočíselné + může mít offset).
    A offset stejně teď nemám jak zobrazit, takže na něj sere pes a bude
    i Z fixně.

Map data
  - map data jsou 2d, tj. čtvercová síť. Jsou v ní roomy, který se maj
    zobrazit - ne nutně jen řez gridem, můžou se zobrazovat i roomy co jsou níž.
  - můžou tam bejt odkazy na roomy v gridu
  - exity do 10 směrů.

  Exity by to chtělo mít separátně, jeden objekt pro každej exit, abych je
    mohl vykreslit v jednom průchodu.


  \|/  \|/  \|/  \|/  \|/  \|/  \|
 --x----x----x----x----x----x----x
  /|\  /|\  /|\  /|\  /|\  /|\  /|
   | \/ | \/ | \/ | \/ | \/ | \/ |
   | /\ | /\ | /\ | /\ | /\ | /\ |
   |/  \|/  \|/  \|/  \|/  \|/  \|
 --x----x----x----x----x----x----x
  /|\  /|\  /|\  /|\  /|\  /|\  /|
   | \/ | \/ | \/ | \/ | \/ | \/ |
   | /\ | /\ | /\ | /\ | /\ | /\ |
   |/  \|/  \|/  \|/  \|/  \|/  \|
 --x----x----x----x----x----x----x

  IDEA: Rozdělit to na několik seznamů, vždycky exity v jednom směru:
  - n/s
  - e/w
  - nw/se
  - sw/ne
  Pokud je mapa čtvercová, tak mi vlastně u každýho exitu stačí vědět,
    kolikátej v pořadí je (což je pořadí v poli). Podle toho dopočítám,
    ke kterejm roomám vede.
  (Teleportační exity nechám zatím bejt.)
    Tzn. když budu mít N/X roomů, tak potřebuju N-1 exitů od každýho za 4 typů.
  - Je teda otázka, jesltli je potřeba mít celou síť exitů, i když se jich
    většina nebude zobrazovat (pro editaci asi jo), ale můžu tohle použít
    minimálně na indexaci exitů (tj. nasypu je třeba do hashmapy a budu je
    indexovat číslem, který by měly v plný síti).

------------

Map() na stornutí roomů dává celkem smysl, ale budu to muset něčím
  obalit, aby šlo zapisovat na libovolnej index, protože vnořená mapa
  se sama nevyrobí.
- asi ani úplně nedává smysl oddělit roomy a exity...

Pozor na to, že prvky v hashmapě jsou v pořadí podle vložení, ne podle
  hodnoty indexu.
  - při vykreslování to asi nevadí, protože pozici určují koordináty, ale
    při určování, co má bejt vidět, by to vadit mohlo.

Potřebuju vůbec na vložený roomy grid?
- ten mi umožní najít roomu podle souřadnic, ale zobrazený stejně nejsou
  všechny roomy, takže to je asi jedno. Navíc můžu mít v Room odkaz na
  RoomOnMap

------------

Vyřešit:

• Jak vyrobit roomu, kde žádná není.

  V browseru určitě musej "neexistující" roomy existovat, abych
  na ně mohl klikat. Vyrobit je můžu jednoduchym cyklem.
  - při tý příležitosti ale potřebuju zjistit, jesti na danejch
    souřadnicích už nějaká rooma existuje.
    - Na to mi každopádně stačí 2d grid.

  IDEA: Nejdřív 2d grid osázím existujícíma místnostma. Pak ho projdu
    cyklem a tam, kde není reálná místnost, doplním neexistující.


• Jak zjistit, co mám zobrazit pod sebou.

  Kdy vlastně budu zobrazovat to, co je pode mnou?
  - Když jsem v podzemí, tak určitě ne.
  - Use case jsou hradby nebo věže hradu, ze kterých bych měl
    vidět nádvoří a tak.
  - Nějak musím poznat, že tam není skála, ale vzduch.
    - tj. musím mít místnosti "In the Air"?
  => Každopádně tam musej bejt nějak marknutý místnosti.


V map datech nebudu potřebovat grid. Když mi ze serveru přijde nová místnost,
tak prostě rebuildnu map data.
- Rozhodně ho nebudu potřebovat hned.



Juju mapper:
-------------
(asi ho nepoužiju, ale nechám si tu odkaz)
http://www.mudportal.com/forum/support/22-jujumapper-open-beta


------------------------------------------------------------------------------

Text Colors
------------

Jak je to s escapováním:

&&r -> &r
&&? -> &?

&x? -> &x

To znamená, že && nejspíš vůbec nemusím řešit. Když to není color kód,
tak prostě outputnu nezměněný znaky. I když vlastně ne, && musím nahradit za &


IDEA:
Nejdřív split podle "&&" a nakonec join přes &&.
=> Efektivně řeším pouze problém stringu vždy s jedním ampersandem.

IDEA: Všechny

Řešení color kódů:
- split podle "&".
  Když je první prvek &&, znamená to, že začínám ampersandem, tj. už první
  prvek může bejt <span>. Vlastně vždycky je, protože i když tam není
  barva, tak použiju base color.

Brute Force:

Otevřu <span>
  Doplním barvu podle toho, jeslti je na začáku color code.

  Když uvntiř najdru color code, tak
  - zavřu <span>
  - otevřu <span>

Zavřu <span>

------------------------------------------------------------------------------

Component hierarchy
--------------------

• Should text link be component or just element?

• Should window content be component or just element?
  - možná obecná komponenta "Content" s tím, že jméno "window_content"
    dostane od okna, které ji vyrobí?

• Should text be component or just element?

Svádí mě to udělat všechno jako komponenty. Bude to sice hodně
  ts souborů, ale zas bude všechno oddělené a bude přehledné
  dědění css (nebude víc deklarací css na classu).

=> Budu na všechno dělat componenty.

------------------------------------------------------------------------------

Vytváření custom "style" elementu
----------------------------------

var style = (function() {
    // Create the <style> tag
    var style = document.createElement("style");

    // WebKit hack
    style.appendChild(document.createTextNode(""));

    // Add the <style> element to the page
    document.head.appendChild(style);
  
    console.log(style.sheet.cssRules); // length is 0, and no rules

    return style;
})();

------------------------------------------------------------------------------

Stavy jako mouseover, active etc.
---------------------------------

V prvé řadě budu asi potřebovat rozšířit definici css. Nebude to jeden
  objekt, ale něco ve smyslu:

{
  normal: Partial<CSSStyleDeclaration>,
  hover: Partial<CSSStyleDeclaration>,
  active: Partial<CSSStyleDeclaration>
}

S tím, že hover, active apod. by asi měly automaticky dědit
  z normal (nejspíš v Element.setCss()).


Další otázka je, jak ty stavy přehazovat. Asi to budu muset dělat
  přes event handlery - což je ok, ale bojím se, abych si to nepřepsal,
  až budu ty handlery potřebovat na něco jinýho. Nejspíš budou muset
  bejt v Componentě, aby se z potomků dalo volat super().



Druhá možnost:
- nesetovat elementům jednotlivý css properties, místo toho vytvořit
  pro každou komponentu css classu (pokud to půjde) a setnout tu.

  https://stackoverflow.com/questions/1720320/how-to-dynamically-create-css-class-in-javascript-and-apply




Konverze jména property CSSStyleDeclaration na jméno css property.
  http://www.java2s.com/Tutorials/Javascript/CSS/How_to_use_CSSStyleDeclaration_Objects.htm#property_from_CSSStyleDeclaration


"fooBarBaz".replace(/([A-Z])/g, "-$1").toLowerCase();
https://stackoverflow.com/questions/24758284/how-to-change-camelcase-to-slug-case-or-kabob-case-via-regex-in-javascript


------------------------------------------------------------------------------

Css
----

CSSStyleDeclaration:
https://www.javascripture.com/CSSStyleDeclaration

Guide to css grid:
https://css-tricks.com/snippets/css/complete-guide-grid/


------------------------------------------------------------------------------

Css all
---------

Zvážit resetování css pro každou komponentu pomocí:

.module
{
  all: initial;
}

https://css-tricks.com/almanac/properties/a/all/

- Asi by se pak musel nastavovat font pro každou komponentu,
  ale to by snad nemuselo vadit (dal bych je někam na jedno místo
  a všude je importoval).

Zkusil jsem to nastavit pro * a vedlo to k tomu, že se zobrazil i title,
kterej je v headeru.

=> kašlat na to.


-------------------

Jelikož budu používat css classy, nedává smysl nastavovat je v instancích.
Tn. buď statickou metodou, nebo automaticky při vytvoření objektu.

A dědění udělám prostě tak, že komponentě nafrkám všechny classy předků,
ono to zjevně funguje.


------------------------------------------------------------------------------

Dědičnost css
--------------

 S děděním css properties to není tak jednoduchý, protože na neprimitivní
  properties nefunguje prototypová dědičnost.
  => Definice css by musela bejt class a v potomkovi bych musel
    explicitně napsat, že ji dědím.


* Možný řešení 1:

  interface I
  {
      a?: number,
      b?: number
  }

  const cssA: I = { a: 1, b: 2 };

  class Css
  {
      constructor(private css: I) {}
      
      public extends(ancestor: I)
      {
          Object.setPrototypeOf(this.css, ancestor);
          return this.css;
      }
  }

  const cssB = new Css
  (
    {
      a: 7
    }
  ).extends(cssA);

  console.log(cssB.a, cssB.b);


* Možný řešení 2:

  Udělat to stejně jako u Entit, tj. Nejdřív vyrobit neprimitivnjí properties
  přes Object.create() a až pak do nich zapsat hodnoty.

Dědění přímo css má nevýhodu v tom, že se musím extra specifikovat, z čeho
  dědím, nestačí zdědit classu. To by ale mohla bejt i výhoda, pokud
  budu mít vícero css v jednom ts souboru, což asi mít budu.

=> Zatím nechám solution 1. Uvidí se, jak se s ním bude pracovat.

--------------

Ještě přece jen zvážím dědičnost ve stylu entit, aby nebylo třeba ručně
psát, z čeho se dědí.

Problém je, že každá komponenta by pak musela mít svoji instanci css,
  nebo aspoň odkaz na ni.
- kdyby to byl odkaz, tak intancování každý entity by ho asi přepsalo.
  I když vlastně ne. Instancuje se z prototypu, kterej se vytváří
  jen jednou. Do něj se nasetujou hodnoty přiřazené v classy. Nově
  vytvořené instance pak jsou jen {}.

Takže zřejmě na Componenty potřebuju to samý co na Entity.
  Je nějakej důvod, proč by to neměly bejt rovnou Entity?
  - budou mít vlastní id, což ale ničemu nevadí. Můžu ho
    používat jako idčko html elementu.
  - budu muset povolit vyrábění entit na klientu. Což je trochu
    problém, protože se mi budou bít idčka.
    - To má easy řešení - entity na klientu budou mít jinej prefix.
      Nepotřebujou timestamp, protože klient entity se nesavujou.


------------------------------------------------------------------------------

Socket class hierarchy
------------------------

'Socket' zapouzdřuje WebSocket
- nemůže se jmenovat WebSocket, protože by se to bilo, ale to asi ničemu nevadí
- měl by řešit čistě věci kolem WebSocketu, tj. event handlery, posílání
  raw dat (nemusí nic vědět o paketech), možná zavírání socketu, pokud
  to bude potřeba.

- otázka je, jestli by měl vůbec mít bejt onMessage() handler. Ale asi jo,
  lepší je přetížit metodu, kteá se z handleru zavolá.
  - tak jako tak ten handler musí bejt metoda, buď aby šel přetížit, nebo
    aby mohl volat metodu, která jde přetížit.

- Socket rozhodně nepotřebuje umět zpracovávat packety, tj. dědit ho
  z PacketHandleru je špatně.

Ze socketu by asi mělo bejt zděděný něco, co umí pracovat s paketama,
  tj. přečíst z paketu data a poslat je do socketu a vyrobit z příchozích
  dat paket a zavolat na něm process().
- mohlo by to i socket zapouzdřovat, ale pak by mu to muselo předávat
  callback na zpracování příchozích dat - v zásadě dává smysl spíš to
  zdědění.

Server verze Connection má na sobě getIp, což client verze nepotřebuje
  (protože je připojená vždycky na server). Ale pokud to mít může
  (bylo by to ip serveru?), tak to asi ničemu nevadí.
Server a client verze connectionu (packet handleru) mají jinak posílání
  paketů - při posílání na klienta se serializuje jinak než při posílání
  na server.
Klient určitě taky potřebuje vlastní verzi connectionu, už proto, že
  na klientu je jen jedna connection.

------------------------------------------------------------------------------

ÚVAHA O ERROR REPORTINGU
------------------------

Errory se dělí na tři druhy:
- reportuju přímo exception
- nemám exception, ale chci zalogovat stack trace
  (takže si vyrobím Error object a reportnu ho).
- stack trace nedává smysl.

IMPORTANT: REPORT(new Error()) je blbost, stack trace loguje
  i funkce ERROR().

- možná by to šlo ale zjednodušit tím, že zruším funkci ERROR(),
  strack trace budu vždycky tvořit funkcí REPORT a log bez stack
  trace půjde vždycky přes Syslog.něco().
- na druhou stranu budu psát víc kódu.

U funkce ERROR() bych asi taky přece jen chtěl rozlišovat druh erroru
  (aby se daly filtrovat skript errory od jiných errorů).
- možná zavést funkce jako SCRIPT_ERROR() etc. Ale popravě rozlišovat to
  jednotně message typem je asi lepší.

Otázka je, jeslti stack trace něčemu vadí. Jako ok, u socket erroru
  ho asi nepotřebuju, ale to je nejspíš ojedinělej případ.
=> Nelogovat WEBSOCKET_ERROR přes Syslog.log().

Závěr:
  Když loguju jakejkoliv error, tak:
  - zajímá mě stack trace
  - asi bych chtěl rozlišovat druhy errorů, abych mohl filtrovat
    třeba jen skript errory (i když...)
    Možná by se dala sloužit funkce ERROR() a REPORT()
    (ať už přes REPORT(new Error()) nebo tím, že ERROR() bude testovat
     typ parametru a pokud to bude Error object, tak ho reportne).
  Do funkce Syslog.log() by neměly chodit žádný errory.

Vidím to takhle:
- sloučím ERROR a REPORT (půjde dát Error object jako parametr ERRORu)
  (tohle sice nebude tak názorný jako REPORT(error), ale nebude se mi stávat,
   že bych napsal REPORT(new Error)).
- nebudu zavádět různý typy errorů, protože všechny errory jsou high
  priority a je třeba je opravit
  (možná zavést WARNING, ale spíš ne.)

Tak nakonec ještě jinak:
- Veškeré reportování bude v Syslogu
  Sylog.log() na info hlášky
  Syslog.logError() na errory (jak Error objekty, tak stringy).

-----------------------------------------------------------------------------

ÚVAHA: kdy házet REPORT(error)

- asi když k tomu můžu dát smysluplnou informaci

Obecně asi nemá smysl probublávat chyby až do top-level funkcí. Dokonce
  v nich mám i napsáno, že by měly bejt odchycené dřív.

IDEA: Možná se řídit tím, co jsem sám napsal do komentáře k funkci REPORT():
- když bych vyhodil ERROR() a dal return, tak je lepší místo toho hodit
  exception. Výjimka mě prostě vyhodí z předpokládanýho stavu věcí.

Ještě jde o to, že s výjimkou můžu něco dělat. Když posílám broadcast
  do všech connectionů a jeden z nich failne, tak to asi ničemu nevadí
  a můžu to klidně poslat do všech zbylých. Když ale posílám třeba nějakou
  entitu na klienta a neprojde to, tak bych dál neměl pracovat s tím,
  že je úspěšně poslaná. Tj. potřebuju, aby výjimka vybublala nahoru,
  protože to je informace o tom, že se to celé nepovedlo.

------------------------------------------------------------------------------