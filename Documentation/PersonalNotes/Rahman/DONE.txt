TODO: Přejmenovat adresář /Build na /Server. V něm bude /js, stejně
  jako v /Client, a do něj se bude buildit. Data na serveru budou tudíž
  v adresáři /Server.
[done]

TODO: V Client/js by měl bejt adresář BrutusNext a v něm až /Shared a /Client.
  To samý na serveru.
[done]

TODO: Možná rozdělit typ Syslog.messageType na ok message a error message.
- zamítnuto, errory se reportují jinak než pomocí Syslog.log().
[won't do]

Proč jsou vlastně WebSocketServer a Https server classy?
  Však jsou to beztak singletony.
TODO: Předělat je na namespacy.
[done]

U socketu to je už jiná otázka, těch může bejt víc a různě se na něj věšej
  event handlery a tak.
- možná na klientu to nemusí bejt classa.
[done]

TODO: Udělat z WebSocketServer namespace.
[done]

TODO: Zvážit, jestli by typy přece jen neměly bejt dependancy místo
  dev dependancy.
- jo, mají být dependancy, prorože jsou používané v runtime kódu.
[done]

TODO: RETHROW možná není potřeba, dělám to ručně a možná je to tak
  čitelnější.
- RETHROW() určitě zrušit, throw Error() je dostatečně výmluvné
  a většinou se beztak novej message formátuje speciálně.
[done]

------------------------------------------------------------------------------

Eslint
------

TODO: Nastavit pravidla pro eslint [done]
- až budou, smazat tslint.json [done]

TODO: Zvážit použití prettify [done]
- nepoužitelný, nedá se konfigurovat

TODO: Vyřešit lintování celého kódu (extension zřejme lintuje jen otevřené
  soubory). [done]

  TODO: Zmigrovat tslint na typescript-eslint [done]

  https://github.com/palantir/tslint/issues/4534

  tool na migraci: https://github.com/typescript-eslint/tslint-to-eslint-config

  Návod (možná):
  https://medium.com/@cosmvs/painless-migration-from-tslint-to-eslint-for-react-with-typescript-4befb4918ba8


  Instalace typescript-eslintu:
  -----------------------------
  npm install eslint --save-dev
  npm install @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev


  If you don’t want to lint certain files, then at the root level of your application’s folder structure you can add a .eslintignore file, where you can list any files that should be ignored.
  For example:
  src/serviceWorker.ts
  src/**/__tests__/**

  Do package.json se prej má přidat:
    "scripts": {
      "lint:ts": "eslint --ext=jsx,ts,tsx src"
    },
  ale nic to nedělá.

  
  Rules: https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin

  Eslint rules: https://eslint.org/docs/rules/

  ------------------------------------------------------------------------------

  Syslog [done]
-------------

  - Přespání metody static classy zjevně funguje. Šlo by to i bez classy?
  - Přepsat metoda přímo v interfacu nejde

  Další možnosti:
  - hodit ty přepisovací metody do objektu (a ten exportnout).
  Ha, ono to zjevně funguje i přímo v namespacu, jen jsem ho špatně importoval.

  Tzn. asi to půjde přes namepacy, ale nebudu mít protected metody...
  - možná ze Shared/Syslog exportovat dva namespacy s tím, že v tom druhém
  budou pomocné metody?

  Ještě to udělám jinak:
   - SyslogUtils bude samostatnej file a v Syslog.ts bude pouze funkce log()
     a typ Syslog.MessageType

  Ok, takže nakonec ještě jinak:
  ------------------------------
  - Shared verze Syslogu exportuje prázdné metody
  - Client a server verze importnou shared Syslog, předefinujou tyhle
    metody a zase exportnou Syslog.
  - Protected metody Syslogu jsou v modulu SyslogUtils, který Syslog importuje.
    Tím je zajištěno, že ten, kdo si importne Syslog, uvidí jen "public" metody
    Syslogu.
  

------------------------------------------------------------------------------