------------------------------------------------------------------------------

FatPriotityQueue
-----------------

TS verze fastpriorityqueue:

- kašlat na ni, už mám vyrobenou klient verzi z té javascriptové.

https://github.com/voxeline/FastPriorityQueue.ts
https://github.com/ddurschlag6river/TypedPriorityQueue/tree/tsport

https://github.com/lemire/TypedFastBitSet.js
- tohle je kupodivu javascript, ale i tak je to asi lepší než fastbitset

TODO: Potřebuju vůbec fast priority queue serializovat?
  - asi ne, to by měla vždycky bejt runtime záležitost

------------------------------------------------------------------------------

TODO: Review Serializable, Entites a Entity
- nemám sílu na to, udělat to v kuse, takže v téhle fázi pouze
  zreviduju eslint errory a vrhnu se na další úkol.
    Je to v zásadě uzavřenej kus kódu, kterej prostě buď funguje
  a nebo ne, nemělo by do něj bejt potřeba dál hrabat.


------------------------------------------------------------------------------

Robust connection reporting
----------------------------

TODO: Logovat, který player se connectnul/disconnectnul a proč
  (zavřel browser tab, spadlo mu spojení...)

pozn: volat socket.close(1000) je nejspíš špatně, protože kód 1000
  není "available for use by applications". To by mohl bejt důvod, proč
  dorazí jinek kód.

TODO: V WebsocketServer.denyConnection() posílat playerovi info, že byla
  connection zamítnuta a proč.


------------------------------------------------------------------------------

Detekce "stale" socketů
------------------------

Spojení se může přerušit způsobem, o kterém se server ani klient
přímo nedozví - například rozpojením kabelu. Zjišťuje se to pravidelným
posíláním pingu a kontrolou, že dorazil.

=> Tohle teď implementovat nebudu, není to nutně potřeba na hratelnou verzi.

TODO: Posílat ping do websocketu, viz
  https://github.com/websockets/ws#how-to-detect-and-close-broken-connections

------------------------------------------------------------------------------

Graceful shutdown
------------------

TODO: node.js process se neukončí, dokud běží http server (a asi i https
  a web socket server).

- problém je, že serverům se dá zavolat .close(), ale to neukončí stávající
  connections. Graceful shutdown je poměrně komplikovaná asynchronní
  záležitost.

------------------------------------------------------------------------------

Cs6 moduly
-----------

Zapnout je v prohlížeči už jde, jen je třeba do všech importů dát koncovku
".js". Problém je, že npm moduly nejsou psané jako cs6 modul.

- Ideální řešení by asi bylo, v prebuild stepu udělat bundle čistě z použitých
  npm modulů, nejlépe jednu verzi pro server (takže ani server runtime
  by nelezl do node_modules) a druhou pro klienta.
    Zkoušel jsem použít rollup, ale nepovedlo se mi ho v rozumném čase
  rozplazit (v bundlu byl jen import, vlastní kód modulu se nezbundloval).

------------------------------------------------------------------------------