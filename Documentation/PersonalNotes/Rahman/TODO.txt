============================================================
 BIG TODO: Nedělat nic, co nepotřebuju na funkční prototyp!
============================================================

TARGET:
- posílám automaticky serializovaný pakety (entity)
- savuju entity na disk
- na klientovi mám komponenty, okna
- funguje registrace playerů
- mám zónu, v ní roomy
- hraju si se zobrazením minimapy
- klikací editor mapy
  - nejdřív jen nové roomy
  - pak editace properties stávajících room
  - pak prototypová dědičnost room a přiřazování prototypu
    v editoru

------------------------------------------------------------------------------

Aktuální TODO:
- zobrazit jedno konkrétní okno (asi to, co se zobrazuje jako první,
  tj. nejspíš loginWindow).
- potom řešit app state a to, kdy se má co zobrazovat.

TODO: Vnitřek LoginWindow (title bar, title, login form etc.)

TODO: Setovat text do title baru (default: "New window).

TODO: Vyrobit komponentu Text (a asi rovnou i TextLink)

TODO: Vyřešit stavy jako mouseover, active etc.
- vyzkoušet vytváření vlastních css class.

Hmm...
- vytvořit vlastní typ pro css properties
- generovat z něj stringovou reprezentaci css classy
  (při té příležiosti můžu pořešit vícenásobnou definici některejch
   properties kvůli zpětný kompatibilitě)
- a asi by stálo za to, zamyslet se ještě jednou na využitím true
  prototypal inheritance pro Component classy.
  - to teda bude znamenat instancovat je přes ClassFactory...


TODO: Nejdřív předělat komponenty na entity a stávající dědičnost
  udělat přes true prototypal inheritance
TODO: Client/Entities

TODO: Potom založit novej typ na css a umožnit v něm deklarovat
  :hover, :active a podobně.

TODO: Pak napsat vyrábění stringové reprezentace css classy.

TODO: A zautomatizovat vyrobení a setnutí css classy pro každou
  komponentu.
  (vyrábět by se měla jen jednou, takže nejspíš v konstruktoru,
   protože ten se zavolá jen při vytváření prototypu - další
   instance se pak vyráběj pře Object.create() a konstruktor se
   nevolá)



------------------------------------------------------------------------------

Component hierarchy
--------------------

• Should text link be component or just element?

• Should window content be component or just element?
  - možná obecná komponenta "Content" s tím, že jméno "window_content"
    dostane od okna, které ji vyrobí?

• Should text be component or just element?

Svádí mě to udělat všechno jako komponenty. Bude to sice hodně
  ts souborů, ale zas bude všechno oddělené a bude přehledné
  dědění css (nebude víc deklarací css na classu).

------------------------------------------------------------------------------

Css
----

CSSStyleDeclaration:
https://www.javascripture.com/CSSStyleDeclaration

Guide to css grid:
https://css-tricks.com/snippets/css/complete-guide-grid/

------------------------------------------------------------------------------

Socket class hierarchy
------------------------

TODO: Vymyslet, kam dát metody na zpracování packetů.

------------------------------------------------------------------------------

FatPriotityQueue
-----------------

TS verze fastpriorityqueue:

- kašlat na ni, už mám vyrobenou klient verzi z té javascriptové
  (ale asi by ji to chtělo updatnout z aktuální verze).

https://github.com/voxeline/FastPriorityQueue.ts
https://github.com/ddurschlag6river/TypedPriorityQueue/tree/tsport

https://github.com/lemire/TypedFastBitSet.js
- tohle je kupodivu javascript, ale i tak je to asi lepší než fastbitset

TODO: Potřebuju vůbec fast priority queue serializovat?
  - popravdě asi ne, to by měla vždycky bejt runtime záležitost

------------------------------------------------------------------------------

Juju mapper:
-------------

http://www.mudportal.com/forum/support/22-jujumapper-open-beta


------------------------------------------------------------------------------

Zákaz spouštění package skriptů v npm:
---------------------------------------

npm config set ignore-scripts true


